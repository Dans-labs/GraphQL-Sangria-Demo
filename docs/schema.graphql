"""The person to be inserted."""
input InputPerson {
  """The person's name."""
  name: String!

  """The date the person was born."""
  birthday: LocalDate!

  """The city/town where this person lives."""
  place: String!
}

"""The work to be inserted."""
input InputWork {
  """The work's title."""
  title: String!
}

"""A LocalDate scalar type represents textual data."""
scalar LocalDate

type Mutation {
  """Add a person to the service."""
  addPerson(
    """The person to be inserted."""
    person: InputPerson!
  ): Person!

  """Add a work together with it's authors."""
  addWork(
    """The work's metadata."""
    work: InputWork!

    """The authors of the work."""
    authors: [UUID!]!
  ): Work!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""The object containing data about the person."""
type Person implements Node {
  """The identifier with which this person is associated."""
  personId: UUID!

  """The person's name."""
  name: String!

  """The date the person was born."""
  birthday: LocalDate!

  """The city/town where this person lives."""
  place: String!

  """List all works of this person."""
  works(before: String, after: String, first: Int, last: Int): WorkConnection

  """The ID of an object"""
  id: ID!
}

"""A connection to a list of items."""
type PersonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonEdge]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type PersonEdge {
  """The item at the end of the edge."""
  node: Person!

  """A cursor for use in pagination."""
  cursor: String!
}

type Query {
  """List all known persons."""
  persons(before: String, after: String, first: Int, last: Int): PersonConnection!

  """Find the person identified with the given identifier."""
  person(
    """The identifier of the person to be found."""
    id: UUID!
  ): Person

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
}

"""
The UUID scalar type represents textual data, formatted as a universally unique identifier.
"""
scalar UUID

"""The object containing data about the work."""
type Work implements Node {
  """The identifier with which this work is associated."""
  workId: UUID!

  """The work's title."""
  title: String!

  """List all authors of this work."""
  authors(before: String, after: String, first: Int, last: Int): PersonConnection!

  """The ID of an object"""
  id: ID!
}

"""A connection to a list of items."""
type WorkConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WorkEdge]

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type WorkEdge {
  """The item at the end of the edge."""
  node: Work!

  """A cursor for use in pagination."""
  cursor: String!
}

